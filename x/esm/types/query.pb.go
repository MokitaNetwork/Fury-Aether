// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aether/esm/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryESMTriggerParamsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryESMTriggerParamsRequest) Reset()         { *m = QueryESMTriggerParamsRequest{} }
func (m *QueryESMTriggerParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryESMTriggerParamsRequest) ProtoMessage()    {}
func (*QueryESMTriggerParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{2}
}
func (m *QueryESMTriggerParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryESMTriggerParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryESMTriggerParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryESMTriggerParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryESMTriggerParamsRequest.Merge(m, src)
}
func (m *QueryESMTriggerParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryESMTriggerParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryESMTriggerParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryESMTriggerParamsRequest proto.InternalMessageInfo

func (m *QueryESMTriggerParamsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryESMTriggerParamsResponse struct {
	EsmTriggerParams ESMTriggerParams `protobuf:"bytes,1,opt,name=esmTriggerParams,proto3" json:"esmTriggerParams" yaml:"esm_trigger_params"`
}

func (m *QueryESMTriggerParamsResponse) Reset()         { *m = QueryESMTriggerParamsResponse{} }
func (m *QueryESMTriggerParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryESMTriggerParamsResponse) ProtoMessage()    {}
func (*QueryESMTriggerParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{3}
}
func (m *QueryESMTriggerParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryESMTriggerParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryESMTriggerParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryESMTriggerParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryESMTriggerParamsResponse.Merge(m, src)
}
func (m *QueryESMTriggerParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryESMTriggerParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryESMTriggerParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryESMTriggerParamsResponse proto.InternalMessageInfo

func (m *QueryESMTriggerParamsResponse) GetEsmTriggerParams() ESMTriggerParams {
	if m != nil {
		return m.EsmTriggerParams
	}
	return ESMTriggerParams{}
}

type QueryESMStatusRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryESMStatusRequest) Reset()         { *m = QueryESMStatusRequest{} }
func (m *QueryESMStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryESMStatusRequest) ProtoMessage()    {}
func (*QueryESMStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{4}
}
func (m *QueryESMStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryESMStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryESMStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryESMStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryESMStatusRequest.Merge(m, src)
}
func (m *QueryESMStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryESMStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryESMStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryESMStatusRequest proto.InternalMessageInfo

func (m *QueryESMStatusRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryESMStatusResponse struct {
	EsmStatus ESMStatus `protobuf:"bytes,1,opt,name=esmStatus,proto3" json:"esmStatus" yaml:"esm_status"`
}

func (m *QueryESMStatusResponse) Reset()         { *m = QueryESMStatusResponse{} }
func (m *QueryESMStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryESMStatusResponse) ProtoMessage()    {}
func (*QueryESMStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{5}
}
func (m *QueryESMStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryESMStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryESMStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryESMStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryESMStatusResponse.Merge(m, src)
}
func (m *QueryESMStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryESMStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryESMStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryESMStatusResponse proto.InternalMessageInfo

func (m *QueryESMStatusResponse) GetEsmStatus() ESMStatus {
	if m != nil {
		return m.EsmStatus
	}
	return ESMStatus{}
}

type QueryCurrentDepositStatsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryCurrentDepositStatsRequest) Reset()         { *m = QueryCurrentDepositStatsRequest{} }
func (m *QueryCurrentDepositStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentDepositStatsRequest) ProtoMessage()    {}
func (*QueryCurrentDepositStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{6}
}
func (m *QueryCurrentDepositStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentDepositStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentDepositStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentDepositStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentDepositStatsRequest.Merge(m, src)
}
func (m *QueryCurrentDepositStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentDepositStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentDepositStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentDepositStatsRequest proto.InternalMessageInfo

func (m *QueryCurrentDepositStatsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryCurrentDepositStatsResponse struct {
	CurrentDepositStats CurrentDepositStats `protobuf:"bytes,1,opt,name=currentDepositStats,proto3" json:"currentDepositStats" yaml:"current_deposit_stats"`
}

func (m *QueryCurrentDepositStatsResponse) Reset()         { *m = QueryCurrentDepositStatsResponse{} }
func (m *QueryCurrentDepositStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentDepositStatsResponse) ProtoMessage()    {}
func (*QueryCurrentDepositStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{7}
}
func (m *QueryCurrentDepositStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentDepositStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentDepositStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentDepositStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentDepositStatsResponse.Merge(m, src)
}
func (m *QueryCurrentDepositStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentDepositStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentDepositStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentDepositStatsResponse proto.InternalMessageInfo

func (m *QueryCurrentDepositStatsResponse) GetCurrentDepositStats() CurrentDepositStats {
	if m != nil {
		return m.CurrentDepositStats
	}
	return CurrentDepositStats{}
}

type QueryUsersDepositMappingRequest struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Depositor string `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
}

func (m *QueryUsersDepositMappingRequest) Reset()         { *m = QueryUsersDepositMappingRequest{} }
func (m *QueryUsersDepositMappingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUsersDepositMappingRequest) ProtoMessage()    {}
func (*QueryUsersDepositMappingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{8}
}
func (m *QueryUsersDepositMappingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUsersDepositMappingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUsersDepositMappingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUsersDepositMappingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUsersDepositMappingRequest.Merge(m, src)
}
func (m *QueryUsersDepositMappingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUsersDepositMappingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUsersDepositMappingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUsersDepositMappingRequest proto.InternalMessageInfo

func (m *QueryUsersDepositMappingRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryUsersDepositMappingRequest) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

type QueryUsersDepositMappingResponse struct {
	UsersDepositMapping UsersDepositMapping `protobuf:"bytes,1,opt,name=usersDepositMapping,proto3" json:"usersDepositMapping" yaml:"user_deposit_mapping"`
}

func (m *QueryUsersDepositMappingResponse) Reset()         { *m = QueryUsersDepositMappingResponse{} }
func (m *QueryUsersDepositMappingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUsersDepositMappingResponse) ProtoMessage()    {}
func (*QueryUsersDepositMappingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{9}
}
func (m *QueryUsersDepositMappingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUsersDepositMappingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUsersDepositMappingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUsersDepositMappingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUsersDepositMappingResponse.Merge(m, src)
}
func (m *QueryUsersDepositMappingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUsersDepositMappingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUsersDepositMappingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUsersDepositMappingResponse proto.InternalMessageInfo

func (m *QueryUsersDepositMappingResponse) GetUsersDepositMapping() UsersDepositMapping {
	if m != nil {
		return m.UsersDepositMapping
	}
	return UsersDepositMapping{}
}

type QueryDataAfterCoolOffRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryDataAfterCoolOffRequest) Reset()         { *m = QueryDataAfterCoolOffRequest{} }
func (m *QueryDataAfterCoolOffRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataAfterCoolOffRequest) ProtoMessage()    {}
func (*QueryDataAfterCoolOffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{10}
}
func (m *QueryDataAfterCoolOffRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataAfterCoolOffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataAfterCoolOffRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataAfterCoolOffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataAfterCoolOffRequest.Merge(m, src)
}
func (m *QueryDataAfterCoolOffRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataAfterCoolOffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataAfterCoolOffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataAfterCoolOffRequest proto.InternalMessageInfo

func (m *QueryDataAfterCoolOffRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryDataAfterCoolOffResponse struct {
	DataAfterCoolOff DataAfterCoolOff `protobuf:"bytes,1,opt,name=dataAfterCoolOff,proto3" json:"dataAfterCoolOff" yaml:"data_after_cool_off"`
}

func (m *QueryDataAfterCoolOffResponse) Reset()         { *m = QueryDataAfterCoolOffResponse{} }
func (m *QueryDataAfterCoolOffResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataAfterCoolOffResponse) ProtoMessage()    {}
func (*QueryDataAfterCoolOffResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{11}
}
func (m *QueryDataAfterCoolOffResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataAfterCoolOffResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataAfterCoolOffResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataAfterCoolOffResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataAfterCoolOffResponse.Merge(m, src)
}
func (m *QueryDataAfterCoolOffResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataAfterCoolOffResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataAfterCoolOffResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataAfterCoolOffResponse proto.InternalMessageInfo

func (m *QueryDataAfterCoolOffResponse) GetDataAfterCoolOff() DataAfterCoolOff {
	if m != nil {
		return m.DataAfterCoolOff
	}
	return DataAfterCoolOff{}
}

type QuerySnapshotPriceRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *QuerySnapshotPriceRequest) Reset()         { *m = QuerySnapshotPriceRequest{} }
func (m *QuerySnapshotPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySnapshotPriceRequest) ProtoMessage()    {}
func (*QuerySnapshotPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{12}
}
func (m *QuerySnapshotPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySnapshotPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySnapshotPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySnapshotPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySnapshotPriceRequest.Merge(m, src)
}
func (m *QuerySnapshotPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySnapshotPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySnapshotPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySnapshotPriceRequest proto.InternalMessageInfo

func (m *QuerySnapshotPriceRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *QuerySnapshotPriceRequest) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

type QuerySnapshotPriceResponse struct {
	Price uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *QuerySnapshotPriceResponse) Reset()         { *m = QuerySnapshotPriceResponse{} }
func (m *QuerySnapshotPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySnapshotPriceResponse) ProtoMessage()    {}
func (*QuerySnapshotPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{13}
}
func (m *QuerySnapshotPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySnapshotPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySnapshotPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySnapshotPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySnapshotPriceResponse.Merge(m, src)
}
func (m *QuerySnapshotPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySnapshotPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySnapshotPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySnapshotPriceResponse proto.InternalMessageInfo

func (m *QuerySnapshotPriceResponse) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type QueryAssetDataAfterCoolOffRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *QueryAssetDataAfterCoolOffRequest) Reset()         { *m = QueryAssetDataAfterCoolOffRequest{} }
func (m *QueryAssetDataAfterCoolOffRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetDataAfterCoolOffRequest) ProtoMessage()    {}
func (*QueryAssetDataAfterCoolOffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{14}
}
func (m *QueryAssetDataAfterCoolOffRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetDataAfterCoolOffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetDataAfterCoolOffRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetDataAfterCoolOffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetDataAfterCoolOffRequest.Merge(m, src)
}
func (m *QueryAssetDataAfterCoolOffRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetDataAfterCoolOffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetDataAfterCoolOffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetDataAfterCoolOffRequest proto.InternalMessageInfo

func (m *QueryAssetDataAfterCoolOffRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type QueryAssetDataAfterCoolOffResponse struct {
	AssetToAmount []AssetToAmount `protobuf:"bytes,1,rep,name=assetToAmount,proto3" json:"assetToAmount" yaml:"asset_to_amount"`
}

func (m *QueryAssetDataAfterCoolOffResponse) Reset()         { *m = QueryAssetDataAfterCoolOffResponse{} }
func (m *QueryAssetDataAfterCoolOffResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetDataAfterCoolOffResponse) ProtoMessage()    {}
func (*QueryAssetDataAfterCoolOffResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75c9862a0c98dd, []int{15}
}
func (m *QueryAssetDataAfterCoolOffResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetDataAfterCoolOffResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetDataAfterCoolOffResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetDataAfterCoolOffResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetDataAfterCoolOffResponse.Merge(m, src)
}
func (m *QueryAssetDataAfterCoolOffResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetDataAfterCoolOffResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetDataAfterCoolOffResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetDataAfterCoolOffResponse proto.InternalMessageInfo

func (m *QueryAssetDataAfterCoolOffResponse) GetAssetToAmount() []AssetToAmount {
	if m != nil {
		return m.AssetToAmount
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "aether.esm.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "aether.esm.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryESMTriggerParamsRequest)(nil), "aether.esm.v1beta1.QueryESMTriggerParamsRequest")
	proto.RegisterType((*QueryESMTriggerParamsResponse)(nil), "aether.esm.v1beta1.QueryESMTriggerParamsResponse")
	proto.RegisterType((*QueryESMStatusRequest)(nil), "aether.esm.v1beta1.QueryESMStatusRequest")
	proto.RegisterType((*QueryESMStatusResponse)(nil), "aether.esm.v1beta1.QueryESMStatusResponse")
	proto.RegisterType((*QueryCurrentDepositStatsRequest)(nil), "aether.esm.v1beta1.QueryCurrentDepositStatsRequest")
	proto.RegisterType((*QueryCurrentDepositStatsResponse)(nil), "aether.esm.v1beta1.QueryCurrentDepositStatsResponse")
	proto.RegisterType((*QueryUsersDepositMappingRequest)(nil), "aether.esm.v1beta1.QueryUsersDepositMappingRequest")
	proto.RegisterType((*QueryUsersDepositMappingResponse)(nil), "aether.esm.v1beta1.QueryUsersDepositMappingResponse")
	proto.RegisterType((*QueryDataAfterCoolOffRequest)(nil), "aether.esm.v1beta1.QueryDataAfterCoolOffRequest")
	proto.RegisterType((*QueryDataAfterCoolOffResponse)(nil), "aether.esm.v1beta1.QueryDataAfterCoolOffResponse")
	proto.RegisterType((*QuerySnapshotPriceRequest)(nil), "aether.esm.v1beta1.QuerySnapshotPriceRequest")
	proto.RegisterType((*QuerySnapshotPriceResponse)(nil), "aether.esm.v1beta1.QuerySnapshotPriceResponse")
	proto.RegisterType((*QueryAssetDataAfterCoolOffRequest)(nil), "aether.esm.v1beta1.QueryAssetDataAfterCoolOffRequest")
	proto.RegisterType((*QueryAssetDataAfterCoolOffResponse)(nil), "aether.esm.v1beta1.QueryAssetDataAfterCoolOffResponse")
}

func init() { proto.RegisterFile("aether/esm/v1beta1/query.proto", fileDescriptor_1e75c9862a0c98dd) }

var fileDescriptor_1e75c9862a0c98dd = []byte{
	// 1005 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x4f, 0x6f, 0xdc, 0x44,
	0x18, 0xc6, 0xe3, 0xa5, 0x09, 0x64, 0x22, 0xaa, 0x30, 0x49, 0xab, 0xc4, 0x6c, 0x77, 0x93, 0x69,
	0x21, 0xa1, 0xa1, 0x76, 0xb3, 0x29, 0x51, 0x29, 0x12, 0xd2, 0xba, 0xed, 0xa1, 0x87, 0xa8, 0xc5,
	0x29, 0x1c, 0xb8, 0x58, 0x93, 0xdd, 0x59, 0xc7, 0x6a, 0xec, 0x71, 0x3d, 0xb3, 0x40, 0x14, 0x2d,
	0x48, 0xdc, 0x91, 0x90, 0x68, 0xbf, 0x00, 0x7c, 0x02, 0xe0, 0xcc, 0x3d, 0x12, 0x97, 0x4a, 0x5c,
	0x38, 0x45, 0x28, 0xe1, 0x13, 0xf4, 0x13, 0x20, 0xcf, 0x8c, 0x37, 0xf1, 0xee, 0x8c, 0x49, 0x6e,
	0x59, 0xbf, 0x7f, 0x9e, 0xdf, 0xfb, 0xc6, 0xf3, 0x8c, 0x41, 0x03, 0x13, 0xbe, 0x4b, 0x32, 0x97,
	0xb0, 0xd8, 0xfd, 0x6a, 0x7d, 0x87, 0x70, 0xbc, 0xee, 0x3e, 0xef, 0x93, 0x6c, 0xdf, 0x49, 0x33,
	0xca, 0x29, 0x84, 0x32, 0xee, 0x10, 0x16, 0x3b, 0x2a, 0x6e, 0xcf, 0x87, 0x34, 0xa4, 0x22, 0xec,
	0xe6, 0x7f, 0xc9, 0x4c, 0xbb, 0x1e, 0x52, 0x1a, 0xee, 0x11, 0x17, 0xa7, 0x91, 0x8b, 0x93, 0x84,
	0x72, 0xcc, 0x23, 0x9a, 0x30, 0x15, 0xbd, 0xd9, 0xa1, 0x2c, 0xa6, 0xcc, 0xdd, 0xc1, 0x8c, 0x48,
	0x81, 0xa1, 0x5c, 0x8a, 0xc3, 0x28, 0x11, 0xc9, 0x2a, 0xb7, 0xa9, 0x61, 0x4a, 0x71, 0x86, 0xe3,
	0xa2, 0x59, 0x5d, 0x93, 0x90, 0x03, 0x8a, 0x28, 0x9a, 0x07, 0xf0, 0xb3, 0x5c, 0xe0, 0x89, 0x28,
	0xf1, 0xc9, 0xf3, 0x3e, 0x61, 0x1c, 0x3d, 0x06, 0x73, 0xa5, 0xa7, 0x2c, 0xa5, 0x09, 0x23, 0xf0,
	0x2e, 0x98, 0x92, 0xad, 0x17, 0xac, 0x25, 0x6b, 0x75, 0xa6, 0x65, 0x3b, 0xe3, 0x03, 0x3b, 0xb2,
	0xc6, 0xbb, 0x74, 0x78, 0xd4, 0x9c, 0xf0, 0x55, 0x3e, 0x72, 0x40, 0x5d, 0x34, 0x7c, 0xb8, 0xbd,
	0xf5, 0x34, 0x8b, 0xc2, 0x90, 0x64, 0x25, 0x41, 0x78, 0x19, 0xd4, 0xa2, 0xae, 0xe8, 0x7a, 0xc9,
	0xaf, 0x45, 0x5d, 0xf4, 0xc2, 0x02, 0xd7, 0x0c, 0x05, 0x8a, 0x85, 0x81, 0x59, 0xc2, 0xe2, 0x52,
	0x4c, 0x51, 0xdd, 0xd0, 0x51, 0x8d, 0xf6, 0xf1, 0x96, 0x73, 0xbe, 0xd7, 0x47, 0xcd, 0xc5, 0x7d,
	0x1c, 0xef, 0xdd, 0x43, 0x84, 0xc5, 0x01, 0x97, 0x09, 0x81, 0x62, 0xf6, 0xc7, 0x04, 0xd0, 0x0a,
	0xb8, 0x52, 0x50, 0x6d, 0x73, 0xcc, 0xfb, 0x46, 0xfe, 0x14, 0x5c, 0x1d, 0x4d, 0x54, 0xdc, 0x5f,
	0x80, 0x69, 0xc2, 0x62, 0xf9, 0x50, 0x01, 0x5f, 0x33, 0x00, 0xcb, 0x24, 0x6f, 0x51, 0x91, 0xbe,
	0x73, 0x4a, 0xca, 0x44, 0x04, 0xf9, 0xa7, 0xad, 0xd0, 0x3a, 0x68, 0x0a, 0xc5, 0xfb, 0xfd, 0x2c,
	0x23, 0x09, 0x7f, 0x40, 0x52, 0xca, 0x22, 0x9e, 0x07, 0x8d, 0x90, 0xbf, 0x58, 0x60, 0xc9, 0x5c,
	0xa3, 0x78, 0xbf, 0x03, 0x73, 0x9d, 0xf1, 0xb0, 0x22, 0x5f, 0xd1, 0x91, 0x6b, 0xba, 0x79, 0x37,
	0xd4, 0x0c, 0x75, 0x39, 0x83, 0xea, 0x18, 0x74, 0x65, 0x8e, 0x98, 0x87, 0x21, 0x5f, 0xa7, 0x84,
	0x88, 0x1a, 0xec, 0x73, 0x46, 0x32, 0xa6, 0x22, 0x5b, 0x38, 0x4d, 0xa3, 0x24, 0x34, 0x0c, 0x06,
	0x5b, 0x60, 0x5a, 0x75, 0xa6, 0xd9, 0x42, 0x6d, 0xc9, 0x5a, 0x9d, 0xf6, 0xe6, 0x5f, 0x1f, 0x35,
	0x67, 0xa5, 0xf8, 0x30, 0x84, 0xfc, 0xd3, 0x34, 0xf4, 0x73, 0xb1, 0x0c, 0xad, 0x8e, 0x5a, 0xc6,
	0xb7, 0x60, 0xae, 0x3f, 0x1e, 0xae, 0x5a, 0x86, 0xa6, 0x9b, 0x77, 0x5d, 0x2d, 0xe3, 0x5d, 0xc9,
	0x93, 0x77, 0x1c, 0x6e, 0x22, 0x96, 0x39, 0xc8, 0xd7, 0x09, 0x0d, 0x8f, 0xd1, 0x03, 0xcc, 0x71,
	0xbb, 0xc7, 0x49, 0x76, 0x9f, 0xd2, 0xbd, 0xc7, 0xbd, 0x9e, 0xe9, 0x3f, 0xfc, 0xb2, 0x38, 0x46,
	0xe3, 0x05, 0x6a, 0x22, 0x0e, 0x66, 0xbb, 0x23, 0xb1, 0xaa, 0x63, 0x34, 0xda, 0xc7, 0x43, 0x6a,
	0x16, 0x5b, 0xed, 0x16, 0x73, 0x1c, 0xe0, 0x3c, 0x21, 0xe8, 0x50, 0xba, 0x17, 0xd0, 0x5e, 0x0f,
	0xf9, 0x63, 0x0a, 0x68, 0x0b, 0x2c, 0x0a, 0xac, 0xed, 0x04, 0xa7, 0x6c, 0x97, 0xf2, 0x27, 0x59,
	0xd4, 0x21, 0xc5, 0x10, 0x57, 0xc0, 0x14, 0x4e, 0xd3, 0x60, 0x38, 0xc8, 0x24, 0x4e, 0xd3, 0x47,
	0x5d, 0xb8, 0x08, 0xde, 0xc2, 0x8c, 0x11, 0x9e, 0x07, 0x6a, 0x22, 0xf0, 0xa6, 0xf8, 0xfd, 0xa8,
	0x8b, 0x5a, 0xc0, 0xd6, 0xb5, 0x53, 0x23, 0xce, 0x83, 0xc9, 0x34, 0x7f, 0x50, 0xb4, 0x13, 0x3f,
	0xd0, 0x3d, 0xb0, 0x2c, 0x6a, 0xda, 0x79, 0x0f, 0xd3, 0x3e, 0xf5, 0x28, 0xe8, 0x07, 0x0b, 0xa0,
	0xaa, 0x62, 0x25, 0x1c, 0x82, 0xb7, 0x05, 0xe1, 0x53, 0xda, 0x8e, 0x69, 0x3f, 0xe1, 0x0b, 0xd6,
	0xd2, 0x1b, 0xab, 0x33, 0xad, 0x65, 0xdd, 0x62, 0xdb, 0x67, 0x13, 0xbd, 0x86, 0xda, 0xea, 0x55,
	0xb9, 0x55, 0x39, 0x37, 0xa7, 0x01, 0x16, 0x61, 0xe4, 0x97, 0xfb, 0xb6, 0x5e, 0xce, 0x80, 0x49,
	0xc1, 0x03, 0x07, 0x60, 0x4a, 0x5a, 0x15, 0x7c, 0x5f, 0xa7, 0x32, 0x6e, 0xf5, 0xf6, 0xca, 0xff,
	0xe6, 0xc9, 0x69, 0x10, 0xfa, 0xfe, 0xaf, 0x7f, 0x7f, 0xaa, 0xd5, 0xa1, 0xed, 0xaa, 0x0b, 0xe5,
	0xcc, 0x65, 0xa2, 0x6e, 0x1c, 0xf8, 0xab, 0x75, 0x6a, 0x90, 0x25, 0xe7, 0x84, 0xb7, 0x8d, 0x32,
	0x86, 0x2b, 0xc1, 0x5e, 0xbf, 0x40, 0x85, 0x42, 0xdc, 0x10, 0x88, 0xb7, 0xe0, 0x9a, 0xab, 0xbf,
	0xf3, 0x46, 0x1c, 0xde, 0x3d, 0x88, 0xba, 0x03, 0xf8, 0xc2, 0x02, 0x97, 0xcb, 0x5e, 0x0d, 0x3f,
	0xa8, 0x92, 0x2e, 0x19, 0xbf, 0x7d, 0xf3, 0x3c, 0xa9, 0x0a, 0x6f, 0x4d, 0xe0, 0xbd, 0x07, 0xaf,
	0x9b, 0xf0, 0xa4, 0xad, 0x4b, 0xac, 0x3f, 0x2c, 0xb0, 0x60, 0x32, 0x67, 0xb8, 0x61, 0x54, 0x35,
	0xdb, 0xbf, 0x7d, 0xe7, 0x62, 0x45, 0x0a, 0x7a, 0x53, 0x40, 0xdf, 0x86, 0x8e, 0x0e, 0x5a, 0xeb,
	0xe3, 0x92, 0xff, 0xb0, 0xe0, 0xd7, 0x38, 0x60, 0x05, 0xbf, 0xd9, 0xe5, 0x2b, 0xf8, 0x2b, 0x2c,
	0x1b, 0xb5, 0x05, 0xff, 0x27, 0xf0, 0x63, 0x1d, 0xbf, 0xce, 0x7a, 0x05, 0xbe, 0x7b, 0x30, 0xbc,
	0x19, 0x06, 0xf0, 0xb7, 0xe2, 0xad, 0x1e, 0x3d, 0xe9, 0x15, 0x6f, 0xb5, 0xc1, 0x51, 0x2a, 0xde,
	0x6a, 0x93, 0x8d, 0xa0, 0x3b, 0x62, 0x02, 0x07, 0x7e, 0xa8, 0x9b, 0x40, 0x63, 0xb8, 0x72, 0xff,
	0xbf, 0x5b, 0xea, 0xcb, 0xae, 0x64, 0x8a, 0xf0, 0x96, 0x51, 0x5f, 0xe7, 0xc5, 0xb6, 0x73, 0xde,
	0x74, 0xc5, 0xfa, 0xa9, 0x60, 0xbd, 0x0b, 0x37, 0x75, 0xac, 0xc2, 0x78, 0x03, 0xa6, 0x0a, 0xdd,
	0x03, 0x69, 0xad, 0x03, 0xf7, 0xa0, 0xf0, 0xf5, 0x01, 0xfc, 0xd3, 0x52, 0x56, 0xae, 0x75, 0x56,
	0xf8, 0x91, 0x11, 0xa7, 0xca, 0xc6, 0xed, 0xcd, 0x8b, 0x96, 0x9d, 0x67, 0x1a, 0x09, 0xad, 0xdd,
	0xbf, 0x1a, 0xcc, 0x7b, 0x78, 0x78, 0xdc, 0xb0, 0x5e, 0x1d, 0x37, 0xac, 0x7f, 0x8e, 0x1b, 0xd6,
	0x8f, 0x27, 0x8d, 0x89, 0x57, 0x27, 0x8d, 0x89, 0xbf, 0x4f, 0x1a, 0x13, 0x5f, 0xae, 0x85, 0x11,
	0xdf, 0xed, 0xef, 0x38, 0x1d, 0x1a, 0xbb, 0x31, 0x7d, 0x16, 0x71, 0x9c, 0x10, 0xfe, 0x35, 0xcd,
	0x9e, 0x15, 0x4a, 0xdf, 0x08, 0x2d, 0xbe, 0x9f, 0x12, 0xb6, 0x33, 0x25, 0x3e, 0xd5, 0x37, 0xfe,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x98, 0xf2, 0x6c, 0x33, 0x7f, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryESMTriggerParams(ctx context.Context, in *QueryESMTriggerParamsRequest, opts ...grpc.CallOption) (*QueryESMTriggerParamsResponse, error)
	QueryESMStatus(ctx context.Context, in *QueryESMStatusRequest, opts ...grpc.CallOption) (*QueryESMStatusResponse, error)
	QueryCurrentDepositStats(ctx context.Context, in *QueryCurrentDepositStatsRequest, opts ...grpc.CallOption) (*QueryCurrentDepositStatsResponse, error)
	QueryUsersDepositMapping(ctx context.Context, in *QueryUsersDepositMappingRequest, opts ...grpc.CallOption) (*QueryUsersDepositMappingResponse, error)
	QueryDataAfterCoolOff(ctx context.Context, in *QueryDataAfterCoolOffRequest, opts ...grpc.CallOption) (*QueryDataAfterCoolOffResponse, error)
	QuerySnapshotPrice(ctx context.Context, in *QuerySnapshotPriceRequest, opts ...grpc.CallOption) (*QuerySnapshotPriceResponse, error)
	QueryAssetDataAfterCoolOff(ctx context.Context, in *QueryAssetDataAfterCoolOffRequest, opts ...grpc.CallOption) (*QueryAssetDataAfterCoolOffResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/aether.esm.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryESMTriggerParams(ctx context.Context, in *QueryESMTriggerParamsRequest, opts ...grpc.CallOption) (*QueryESMTriggerParamsResponse, error) {
	out := new(QueryESMTriggerParamsResponse)
	err := c.cc.Invoke(ctx, "/aether.esm.v1beta1.Query/QueryESMTriggerParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryESMStatus(ctx context.Context, in *QueryESMStatusRequest, opts ...grpc.CallOption) (*QueryESMStatusResponse, error) {
	out := new(QueryESMStatusResponse)
	err := c.cc.Invoke(ctx, "/aether.esm.v1beta1.Query/QueryESMStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCurrentDepositStats(ctx context.Context, in *QueryCurrentDepositStatsRequest, opts ...grpc.CallOption) (*QueryCurrentDepositStatsResponse, error) {
	out := new(QueryCurrentDepositStatsResponse)
	err := c.cc.Invoke(ctx, "/aether.esm.v1beta1.Query/QueryCurrentDepositStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUsersDepositMapping(ctx context.Context, in *QueryUsersDepositMappingRequest, opts ...grpc.CallOption) (*QueryUsersDepositMappingResponse, error) {
	out := new(QueryUsersDepositMappingResponse)
	err := c.cc.Invoke(ctx, "/aether.esm.v1beta1.Query/QueryUsersDepositMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDataAfterCoolOff(ctx context.Context, in *QueryDataAfterCoolOffRequest, opts ...grpc.CallOption) (*QueryDataAfterCoolOffResponse, error) {
	out := new(QueryDataAfterCoolOffResponse)
	err := c.cc.Invoke(ctx, "/aether.esm.v1beta1.Query/QueryDataAfterCoolOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySnapshotPrice(ctx context.Context, in *QuerySnapshotPriceRequest, opts ...grpc.CallOption) (*QuerySnapshotPriceResponse, error) {
	out := new(QuerySnapshotPriceResponse)
	err := c.cc.Invoke(ctx, "/aether.esm.v1beta1.Query/QuerySnapshotPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAssetDataAfterCoolOff(ctx context.Context, in *QueryAssetDataAfterCoolOffRequest, opts ...grpc.CallOption) (*QueryAssetDataAfterCoolOffResponse, error) {
	out := new(QueryAssetDataAfterCoolOffResponse)
	err := c.cc.Invoke(ctx, "/aether.esm.v1beta1.Query/QueryAssetDataAfterCoolOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryESMTriggerParams(context.Context, *QueryESMTriggerParamsRequest) (*QueryESMTriggerParamsResponse, error)
	QueryESMStatus(context.Context, *QueryESMStatusRequest) (*QueryESMStatusResponse, error)
	QueryCurrentDepositStats(context.Context, *QueryCurrentDepositStatsRequest) (*QueryCurrentDepositStatsResponse, error)
	QueryUsersDepositMapping(context.Context, *QueryUsersDepositMappingRequest) (*QueryUsersDepositMappingResponse, error)
	QueryDataAfterCoolOff(context.Context, *QueryDataAfterCoolOffRequest) (*QueryDataAfterCoolOffResponse, error)
	QuerySnapshotPrice(context.Context, *QuerySnapshotPriceRequest) (*QuerySnapshotPriceResponse, error)
	QueryAssetDataAfterCoolOff(context.Context, *QueryAssetDataAfterCoolOffRequest) (*QueryAssetDataAfterCoolOffResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryESMTriggerParams(ctx context.Context, req *QueryESMTriggerParamsRequest) (*QueryESMTriggerParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryESMTriggerParams not implemented")
}
func (*UnimplementedQueryServer) QueryESMStatus(ctx context.Context, req *QueryESMStatusRequest) (*QueryESMStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryESMStatus not implemented")
}
func (*UnimplementedQueryServer) QueryCurrentDepositStats(ctx context.Context, req *QueryCurrentDepositStatsRequest) (*QueryCurrentDepositStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCurrentDepositStats not implemented")
}
func (*UnimplementedQueryServer) QueryUsersDepositMapping(ctx context.Context, req *QueryUsersDepositMappingRequest) (*QueryUsersDepositMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUsersDepositMapping not implemented")
}
func (*UnimplementedQueryServer) QueryDataAfterCoolOff(ctx context.Context, req *QueryDataAfterCoolOffRequest) (*QueryDataAfterCoolOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDataAfterCoolOff not implemented")
}
func (*UnimplementedQueryServer) QuerySnapshotPrice(ctx context.Context, req *QuerySnapshotPriceRequest) (*QuerySnapshotPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySnapshotPrice not implemented")
}
func (*UnimplementedQueryServer) QueryAssetDataAfterCoolOff(ctx context.Context, req *QueryAssetDataAfterCoolOffRequest) (*QueryAssetDataAfterCoolOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAssetDataAfterCoolOff not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.esm.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryESMTriggerParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryESMTriggerParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryESMTriggerParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.esm.v1beta1.Query/QueryESMTriggerParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryESMTriggerParams(ctx, req.(*QueryESMTriggerParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryESMStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryESMStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryESMStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.esm.v1beta1.Query/QueryESMStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryESMStatus(ctx, req.(*QueryESMStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCurrentDepositStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentDepositStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCurrentDepositStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.esm.v1beta1.Query/QueryCurrentDepositStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCurrentDepositStats(ctx, req.(*QueryCurrentDepositStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUsersDepositMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUsersDepositMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUsersDepositMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.esm.v1beta1.Query/QueryUsersDepositMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUsersDepositMapping(ctx, req.(*QueryUsersDepositMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDataAfterCoolOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataAfterCoolOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDataAfterCoolOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.esm.v1beta1.Query/QueryDataAfterCoolOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDataAfterCoolOff(ctx, req.(*QueryDataAfterCoolOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySnapshotPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySnapshotPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySnapshotPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.esm.v1beta1.Query/QuerySnapshotPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySnapshotPrice(ctx, req.(*QuerySnapshotPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAssetDataAfterCoolOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetDataAfterCoolOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAssetDataAfterCoolOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.esm.v1beta1.Query/QueryAssetDataAfterCoolOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAssetDataAfterCoolOff(ctx, req.(*QueryAssetDataAfterCoolOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aether.esm.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryESMTriggerParams",
			Handler:    _Query_QueryESMTriggerParams_Handler,
		},
		{
			MethodName: "QueryESMStatus",
			Handler:    _Query_QueryESMStatus_Handler,
		},
		{
			MethodName: "QueryCurrentDepositStats",
			Handler:    _Query_QueryCurrentDepositStats_Handler,
		},
		{
			MethodName: "QueryUsersDepositMapping",
			Handler:    _Query_QueryUsersDepositMapping_Handler,
		},
		{
			MethodName: "QueryDataAfterCoolOff",
			Handler:    _Query_QueryDataAfterCoolOff_Handler,
		},
		{
			MethodName: "QuerySnapshotPrice",
			Handler:    _Query_QuerySnapshotPrice_Handler,
		},
		{
			MethodName: "QueryAssetDataAfterCoolOff",
			Handler:    _Query_QueryAssetDataAfterCoolOff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aether/esm/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryESMTriggerParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryESMTriggerParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryESMTriggerParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryESMTriggerParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryESMTriggerParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryESMTriggerParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EsmTriggerParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryESMStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryESMStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryESMStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryESMStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryESMStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryESMStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EsmStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCurrentDepositStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentDepositStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentDepositStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentDepositStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentDepositStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentDepositStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CurrentDepositStats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUsersDepositMappingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUsersDepositMappingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUsersDepositMappingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUsersDepositMappingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUsersDepositMappingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUsersDepositMappingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UsersDepositMapping.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDataAfterCoolOffRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataAfterCoolOffRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataAfterCoolOffRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataAfterCoolOffResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataAfterCoolOffResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataAfterCoolOffResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DataAfterCoolOff.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySnapshotPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySnapshotPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySnapshotPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySnapshotPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySnapshotPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySnapshotPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetDataAfterCoolOffRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetDataAfterCoolOffRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetDataAfterCoolOffRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetDataAfterCoolOffResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetDataAfterCoolOffResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetDataAfterCoolOffResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetToAmount) > 0 {
		for iNdEx := len(m.AssetToAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetToAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryESMTriggerParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryESMTriggerParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EsmTriggerParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryESMStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryESMStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EsmStatus.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCurrentDepositStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryCurrentDepositStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CurrentDepositStats.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUsersDepositMappingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUsersDepositMappingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UsersDepositMapping.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDataAfterCoolOffRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryDataAfterCoolOffResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DataAfterCoolOff.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySnapshotPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QuerySnapshotPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != 0 {
		n += 1 + sovQuery(uint64(m.Price))
	}
	return n
}

func (m *QueryAssetDataAfterCoolOffRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryAssetDataAfterCoolOffResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetToAmount) > 0 {
		for _, e := range m.AssetToAmount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryESMTriggerParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryESMTriggerParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryESMTriggerParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryESMTriggerParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryESMTriggerParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryESMTriggerParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsmTriggerParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EsmTriggerParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryESMStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryESMStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryESMStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryESMStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryESMStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryESMStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsmStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EsmStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentDepositStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentDepositStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentDepositStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentDepositStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentDepositStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentDepositStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDepositStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentDepositStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUsersDepositMappingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUsersDepositMappingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUsersDepositMappingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUsersDepositMappingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUsersDepositMappingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUsersDepositMappingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersDepositMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsersDepositMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataAfterCoolOffRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataAfterCoolOffRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataAfterCoolOffRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataAfterCoolOffResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataAfterCoolOffResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataAfterCoolOffResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAfterCoolOff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataAfterCoolOff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySnapshotPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySnapshotPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySnapshotPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySnapshotPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySnapshotPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySnapshotPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetDataAfterCoolOffRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetDataAfterCoolOffRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetDataAfterCoolOffRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetDataAfterCoolOffResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetDataAfterCoolOffResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetDataAfterCoolOffResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetToAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetToAmount = append(m.AssetToAmount, AssetToAmount{})
			if err := m.AssetToAmount[len(m.AssetToAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
