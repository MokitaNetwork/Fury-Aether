// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aether/asset/v1beta1/extendedPairVault.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExtendedPairVault struct {
	Id                  uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId               uint64                                 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	PairId              uint64                                 `protobuf:"varint,3,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	StabilityFee        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=stability_fee,json=stabilityFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stability_fee" yaml:"stability_fee"`
	ClosingFee          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=closing_fee,json=closingFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"closing_fee" yaml:"closing_fee"`
	LiquidationPenalty  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=liquidation_penalty,json=liquidationPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_penalty" yaml:"liquidation_penalty"`
	DrawDownFee         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=draw_down_fee,json=drawDownFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"draw_down_fee" yaml:"draw_down_fee"`
	IsVaultActive       bool                                   `protobuf:"varint,8,opt,name=is_vault_active,json=isVaultActive,proto3" json:"is_vault_active,omitempty" yaml:"active_flag"`
	DebtCeiling         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=debt_ceiling,json=debtCeiling,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"debt_ceiling" yaml:"debt_ceiling"`
	DebtFloor           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=debt_floor,json=debtFloor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"debt_floor" yaml:"debt_floor"`
	IsStableMintVault   bool                                   `protobuf:"varint,11,opt,name=is_stable_mint_vault,json=isStableMintVault,proto3" json:"is_stable_mint_vault,omitempty" yaml:"is_stable_mint_vault"`
	MinCr               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=min_cr,json=minCr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_cr" yaml:"min_cr"`
	PairName            string                                 `protobuf:"bytes,13,opt,name=pair_name,json=pairName,proto3" json:"pair_name,omitempty" yaml:"pair_name"`
	AssetOutOraclePrice bool                                   `protobuf:"varint,14,opt,name=asset_out_oracle_price,json=assetOutOraclePrice,proto3" json:"asset_out_oracle_price,omitempty" yaml:"asset_out_oracle_price"`
	AssetOutPrice       uint64                                 `protobuf:"varint,15,opt,name=asset_out_price,json=assetOutPrice,proto3" json:"asset_out_price,omitempty" yaml:"asset_out_price"`
	MinUsdValueLeft     uint64                                 `protobuf:"varint,16,opt,name=min_usd_value_left,json=minUsdValueLeft,proto3" json:"min_usd_value_left,omitempty" yaml:"min_usd_value_left"`
	BlockHeight         int64                                  `protobuf:"varint,17,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty" yaml:"block_height"`
	BlockTime           time.Time                              `protobuf:"bytes,18,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time" yaml:"block_time"`
}

func (m *ExtendedPairVault) Reset()         { *m = ExtendedPairVault{} }
func (m *ExtendedPairVault) String() string { return proto.CompactTextString(m) }
func (*ExtendedPairVault) ProtoMessage()    {}
func (*ExtendedPairVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_674639f7c4b90511, []int{0}
}
func (m *ExtendedPairVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedPairVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedPairVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedPairVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedPairVault.Merge(m, src)
}
func (m *ExtendedPairVault) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedPairVault) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedPairVault.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedPairVault proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExtendedPairVault)(nil), "aether.asset.v1beta1.ExtendedPairVault")
}

func init() {
	proto.RegisterFile("aether/asset/v1beta1/extendedPairVault.proto", fileDescriptor_674639f7c4b90511)
}

var fileDescriptor_674639f7c4b90511 = []byte{
	// 821 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xc1, 0x72, 0xe3, 0x34,
	0x18, 0x8e, 0xbb, 0xdb, 0x6c, 0xa3, 0x34, 0xed, 0x46, 0xcd, 0x14, 0x13, 0xa6, 0x71, 0xd0, 0x81,
	0xc9, 0x0c, 0x6c, 0x3c, 0x85, 0xdb, 0x1e, 0x60, 0x48, 0xbb, 0x1d, 0xca, 0x2c, 0xb4, 0x23, 0xa0,
	0xc3, 0x70, 0xd1, 0xc8, 0xb6, 0xe2, 0x88, 0xd8, 0x96, 0xb1, 0xe5, 0x76, 0x7b, 0xe0, 0x1d, 0xf6,
	0x19, 0x38, 0xf1, 0x28, 0x3d, 0xee, 0x91, 0xe1, 0x60, 0x20, 0x7d, 0x03, 0x3f, 0x01, 0x23, 0xc9,
	0x25, 0x69, 0xa7, 0x97, 0x0c, 0xa7, 0xe8, 0xff, 0xfe, 0x2f, 0xdf, 0xf7, 0x4b, 0xfa, 0xf5, 0x1b,
	0x7c, 0x42, 0x99, 0x9c, 0xb1, 0xcc, 0xa5, 0x79, 0xce, 0xa4, 0x7b, 0x79, 0xe8, 0x31, 0x49, 0x0f,
	0x5d, 0xf6, 0x46, 0xb2, 0x24, 0x60, 0xc1, 0x39, 0xe5, 0xd9, 0x05, 0x2d, 0x22, 0x39, 0x4e, 0x33,
	0x21, 0x05, 0xec, 0x19, 0xf6, 0x58, 0xb3, 0xc7, 0x35, 0xbb, 0xdf, 0x0b, 0x45, 0x28, 0x34, 0xc1,
	0x55, 0x2b, 0xc3, 0xed, 0x3b, 0xa1, 0x10, 0x61, 0xc4, 0x5c, 0x1d, 0x79, 0xc5, 0xd4, 0x95, 0x3c,
	0x66, 0xb9, 0xa4, 0x71, 0x6a, 0x08, 0xe8, 0xb7, 0x36, 0xe8, 0xbe, 0x7a, 0x68, 0x04, 0x77, 0xc0,
	0x06, 0x0f, 0x6c, 0x6b, 0x68, 0x8d, 0x9e, 0xe2, 0x0d, 0x1e, 0xc0, 0x11, 0x68, 0xd2, 0x34, 0x25,
	0x3c, 0xb0, 0x37, 0x14, 0x36, 0xe9, 0x56, 0xa5, 0xd3, 0xb9, 0xa6, 0x71, 0xf4, 0x12, 0x19, 0x1c,
	0xe1, 0x4d, 0x9a, 0xa6, 0xa7, 0x01, 0xfc, 0x18, 0x3c, 0x4b, 0x29, 0xcf, 0x14, 0xf5, 0x89, 0xa6,
	0xc2, 0xaa, 0x74, 0x76, 0x0c, 0xb5, 0x4e, 0x20, 0xdc, 0x54, 0xab, 0xd3, 0x00, 0xce, 0x41, 0x27,
	0x97, 0xd4, 0xe3, 0x11, 0x97, 0xd7, 0x64, 0xca, 0x98, 0xfd, 0x74, 0x68, 0x8d, 0x5a, 0x93, 0x93,
	0x9b, 0xd2, 0x69, 0xfc, 0x59, 0x3a, 0x1f, 0x85, 0x5c, 0xce, 0x0a, 0x6f, 0xec, 0x8b, 0xd8, 0xf5,
	0x45, 0x1e, 0x8b, 0xbc, 0xfe, 0x79, 0x91, 0x07, 0x73, 0x57, 0x5e, 0xa7, 0x2c, 0x1f, 0x1f, 0x33,
	0xbf, 0x2a, 0x9d, 0x9e, 0x31, 0xb8, 0x27, 0x86, 0xf0, 0xf6, 0x7f, 0xf1, 0x09, 0x63, 0x90, 0x81,
	0xb6, 0x1f, 0x89, 0x9c, 0x27, 0xa1, 0xb6, 0xda, 0xd4, 0x56, 0xc7, 0x6b, 0x5b, 0x41, 0x63, 0xb5,
	0x22, 0x85, 0x30, 0xa8, 0x23, 0x65, 0xf3, 0x2b, 0xd8, 0x8b, 0xf8, 0x2f, 0x05, 0x0f, 0xa8, 0xe4,
	0x22, 0x21, 0x29, 0x4b, 0x68, 0x24, 0xaf, 0xed, 0xa6, 0xb6, 0x7b, 0xbd, 0xb6, 0x5d, 0xdf, 0xd8,
	0x3d, 0x22, 0x89, 0x30, 0x5c, 0x41, 0xcf, 0x0d, 0x08, 0x7f, 0x06, 0x9d, 0x20, 0xa3, 0x57, 0x24,
	0x10, 0x57, 0x89, 0xde, 0xe7, 0xb3, 0xff, 0x77, 0xa4, 0xf7, 0xc4, 0x10, 0x6e, 0xab, 0xf8, 0x58,
	0x5c, 0x25, 0x6a, 0xab, 0x9f, 0x83, 0x5d, 0x9e, 0x93, 0x4b, 0xd5, 0x31, 0x84, 0xfa, 0x92, 0x5f,
	0x32, 0x7b, 0x6b, 0x68, 0x8d, 0xb6, 0x26, 0xfb, 0xcb, 0x73, 0x32, 0x38, 0x99, 0x46, 0x34, 0x44,
	0xb8, 0xc3, 0x73, 0xdd, 0x5f, 0x5f, 0x6a, 0x10, 0xce, 0xc0, 0x76, 0xc0, 0x3c, 0x49, 0x7c, 0xc6,
	0x23, 0x9e, 0x84, 0x76, 0x4b, 0x97, 0xfa, 0x6a, 0x8d, 0x52, 0x4f, 0x13, 0x59, 0x95, 0xce, 0x5e,
	0x5d, 0xea, 0x8a, 0x96, 0xaa, 0x94, 0x79, 0xf2, 0xc8, 0x44, 0xd0, 0x03, 0x40, 0x67, 0xa7, 0x91,
	0x10, 0x99, 0x0d, 0xb4, 0xcf, 0xd1, 0xda, 0x3e, 0xdd, 0x15, 0x1f, 0xad, 0x84, 0x70, 0x4b, 0x05,
	0x27, 0x6a, 0x0d, 0xcf, 0x41, 0x8f, 0xe7, 0x44, 0xb5, 0x5c, 0xc4, 0x48, 0xcc, 0x13, 0x69, 0x4e,
	0xc6, 0x6e, 0xeb, 0x23, 0x71, 0xaa, 0xd2, 0xf9, 0xc0, 0xfc, 0xff, 0x31, 0x16, 0xc2, 0x5d, 0x9e,
	0x7f, 0xa7, 0xd1, 0x6f, 0x78, 0x22, 0xcd, 0x2b, 0xbc, 0x00, 0xcd, 0x98, 0x27, 0xc4, 0xcf, 0xec,
	0x6d, 0x5d, 0xf1, 0x17, 0x6b, 0x5f, 0x62, 0xfd, 0x46, 0x8d, 0x0a, 0xc2, 0x9b, 0x31, 0x4f, 0x8e,
	0x32, 0x78, 0x08, 0x5a, 0xfa, 0x29, 0x26, 0x34, 0x66, 0x76, 0x47, 0x4b, 0xf7, 0xaa, 0xd2, 0x79,
	0xbe, 0xf2, 0x4a, 0x55, 0x0a, 0xe1, 0x2d, 0xb5, 0xfe, 0x96, 0xc6, 0x0c, 0x5e, 0x80, 0x7d, 0x3d,
	0x6e, 0x88, 0x28, 0x24, 0x11, 0x19, 0xf5, 0x23, 0x46, 0xd2, 0x8c, 0xfb, 0xcc, 0xde, 0xd1, 0xdb,
	0xfb, 0xb0, 0x2a, 0x9d, 0x83, 0xfa, 0xc6, 0x1f, 0xe5, 0x21, 0xbc, 0xa7, 0x13, 0x67, 0x85, 0x3c,
	0xd3, 0xf0, 0xb9, 0x42, 0xe1, 0x04, 0xec, 0x2e, 0xf9, 0x46, 0x70, 0x57, 0x8f, 0x8d, 0x7e, 0x55,
	0x3a, 0xfb, 0x0f, 0x05, 0x6b, 0xa5, 0xce, 0x9d, 0x92, 0xd1, 0xf8, 0x1a, 0x40, 0xb5, 0xc1, 0x22,
	0x0f, 0xc8, 0x25, 0x8d, 0x0a, 0x46, 0x22, 0x36, 0x95, 0xf6, 0x73, 0x2d, 0x73, 0x50, 0x95, 0xce,
	0xfb, 0xcb, 0x43, 0xb8, 0xcf, 0x41, 0x78, 0x37, 0xe6, 0xc9, 0x0f, 0x79, 0x70, 0xa1, 0xa0, 0xd7,
	0x6c, 0x2a, 0xe1, 0x4b, 0xb0, 0xed, 0x45, 0xc2, 0x9f, 0x93, 0x19, 0xe3, 0xe1, 0x4c, 0xda, 0xdd,
	0xa1, 0x35, 0x7a, 0x32, 0x79, 0x6f, 0xd9, 0x64, 0xab, 0x59, 0x84, 0xdb, 0x3a, 0xfc, 0x4a, 0x47,
	0xf0, 0x47, 0x00, 0x4c, 0x56, 0xcd, 0x58, 0x1b, 0x0e, 0xad, 0x51, 0xfb, 0xd3, 0xfe, 0xd8, 0x0c,
	0xe0, 0xf1, 0xdd, 0x00, 0x1e, 0x7f, 0x7f, 0x37, 0x80, 0x27, 0x07, 0xea, 0x3a, 0x97, 0x6d, 0xb5,
	0xfc, 0x2f, 0x7a, 0xfb, 0x97, 0x63, 0xe1, 0x96, 0x06, 0x14, 0x7d, 0x72, 0x76, 0xf3, 0xcf, 0xa0,
	0xf1, 0xfb, 0x62, 0xd0, 0xb8, 0x59, 0x0c, 0xac, 0x77, 0x8b, 0x81, 0xf5, 0xf7, 0x62, 0x60, 0xbd,
	0xbd, 0x1d, 0x34, 0xde, 0xdd, 0x0e, 0x1a, 0x7f, 0xdc, 0x0e, 0x1a, 0x3f, 0xbd, 0x58, 0x69, 0x89,
	0x58, 0xcc, 0xb9, 0xa4, 0x09, 0x93, 0x57, 0x22, 0x9b, 0xbb, 0xf5, 0xa7, 0xe5, 0x4d, 0xfd, 0x71,
	0xd1, 0xdd, 0xe1, 0x35, 0x75, 0x39, 0x9f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x29, 0x1d, 0x75,
	0x7e, 0x79, 0x06, 0x00, 0x00,
}

func (m *ExtendedPairVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedPairVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedPairVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BlockTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintExtendedPairVault(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if m.BlockHeight != 0 {
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.MinUsdValueLeft != 0 {
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(m.MinUsdValueLeft))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.AssetOutPrice != 0 {
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(m.AssetOutPrice))
		i--
		dAtA[i] = 0x78
	}
	if m.AssetOutOraclePrice {
		i--
		if m.AssetOutOraclePrice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.PairName) > 0 {
		i -= len(m.PairName)
		copy(dAtA[i:], m.PairName)
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(len(m.PairName)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size := m.MinCr.Size()
		i -= size
		if _, err := m.MinCr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.IsStableMintVault {
		i--
		if m.IsStableMintVault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.DebtFloor.Size()
		i -= size
		if _, err := m.DebtFloor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.DebtCeiling.Size()
		i -= size
		if _, err := m.DebtCeiling.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.IsVaultActive {
		i--
		if m.IsVaultActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.DrawDownFee.Size()
		i -= size
		if _, err := m.DrawDownFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.LiquidationPenalty.Size()
		i -= size
		if _, err := m.LiquidationPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ClosingFee.Size()
		i -= size
		if _, err := m.ClosingFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.StabilityFee.Size()
		i -= size
		if _, err := m.StabilityFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.PairId != 0 {
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintExtendedPairVault(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExtendedPairVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovExtendedPairVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExtendedPairVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovExtendedPairVault(uint64(m.Id))
	}
	if m.AppId != 0 {
		n += 1 + sovExtendedPairVault(uint64(m.AppId))
	}
	if m.PairId != 0 {
		n += 1 + sovExtendedPairVault(uint64(m.PairId))
	}
	l = m.StabilityFee.Size()
	n += 1 + l + sovExtendedPairVault(uint64(l))
	l = m.ClosingFee.Size()
	n += 1 + l + sovExtendedPairVault(uint64(l))
	l = m.LiquidationPenalty.Size()
	n += 1 + l + sovExtendedPairVault(uint64(l))
	l = m.DrawDownFee.Size()
	n += 1 + l + sovExtendedPairVault(uint64(l))
	if m.IsVaultActive {
		n += 2
	}
	l = m.DebtCeiling.Size()
	n += 1 + l + sovExtendedPairVault(uint64(l))
	l = m.DebtFloor.Size()
	n += 1 + l + sovExtendedPairVault(uint64(l))
	if m.IsStableMintVault {
		n += 2
	}
	l = m.MinCr.Size()
	n += 1 + l + sovExtendedPairVault(uint64(l))
	l = len(m.PairName)
	if l > 0 {
		n += 1 + l + sovExtendedPairVault(uint64(l))
	}
	if m.AssetOutOraclePrice {
		n += 2
	}
	if m.AssetOutPrice != 0 {
		n += 1 + sovExtendedPairVault(uint64(m.AssetOutPrice))
	}
	if m.MinUsdValueLeft != 0 {
		n += 2 + sovExtendedPairVault(uint64(m.MinUsdValueLeft))
	}
	if m.BlockHeight != 0 {
		n += 2 + sovExtendedPairVault(uint64(m.BlockHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BlockTime)
	n += 2 + l + sovExtendedPairVault(uint64(l))
	return n
}

func sovExtendedPairVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExtendedPairVault(x uint64) (n int) {
	return sovExtendedPairVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExtendedPairVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtendedPairVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedPairVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedPairVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StabilityFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StabilityFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClosingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawDownFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DrawDownFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVaultActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVaultActive = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtCeiling", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtCeiling.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtFloor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtFloor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStableMintVault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStableMintVault = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutOraclePrice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssetOutOraclePrice = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutPrice", wireType)
			}
			m.AssetOutPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOutPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUsdValueLeft", wireType)
			}
			m.MinUsdValueLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUsdValueLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtendedPairVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtendedPairVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtendedPairVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtendedPairVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedPairVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExtendedPairVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExtendedPairVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExtendedPairVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExtendedPairVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtendedPairVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExtendedPairVault = fmt.Errorf("proto: unexpected end of group")
)
