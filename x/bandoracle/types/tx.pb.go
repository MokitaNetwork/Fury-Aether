// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aether/bandoracle/v1beta1/tx.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgFetchPriceData struct {
	Creator            string                                   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OracleScriptID     uint64                                   `protobuf:"varint,2,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty" yaml:"oracle_script_id"`
	SourceChannel      string                                   `protobuf:"bytes,3,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty"`
	Calldata           *FetchPriceCallData                      `protobuf:"bytes,4,opt,name=calldata,proto3" json:"calldata,omitempty"`
	AskCount           uint64                                   `protobuf:"varint,5,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty"`
	MinCount           uint64                                   `protobuf:"varint,6,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	FeeLimit           github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=fee_limit,json=feeLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_limit"`
	RequestKey         string                                   `protobuf:"bytes,8,opt,name=request_key,json=requestKey,proto3" json:"request_key,omitempty"`
	PrepareGas         uint64                                   `protobuf:"varint,9,opt,name=prepare_gas,json=prepareGas,proto3" json:"prepare_gas,omitempty"`
	ExecuteGas         uint64                                   `protobuf:"varint,10,opt,name=execute_gas,json=executeGas,proto3" json:"execute_gas,omitempty"`
	ClientID           string                                   `protobuf:"bytes,11,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TwaBatchSize       uint64                                   `protobuf:"varint,12,opt,name=twa_batch_size,json=twaBatchSize,proto3" json:"twa_batch_size,omitempty"`
	AcceptedHeightDiff int64                                    `protobuf:"varint,13,opt,name=accepted_height_diff,json=acceptedHeightDiff,proto3" json:"accepted_height_diff,omitempty" yaml:"accepted_height_diff"`
}

func (m *MsgFetchPriceData) Reset()         { *m = MsgFetchPriceData{} }
func (m *MsgFetchPriceData) String() string { return proto.CompactTextString(m) }
func (*MsgFetchPriceData) ProtoMessage()    {}
func (*MsgFetchPriceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_527350aa0883cada, []int{0}
}
func (m *MsgFetchPriceData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFetchPriceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFetchPriceData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFetchPriceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFetchPriceData.Merge(m, src)
}
func (m *MsgFetchPriceData) XXX_Size() int {
	return m.Size()
}
func (m *MsgFetchPriceData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFetchPriceData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFetchPriceData proto.InternalMessageInfo

func (m *MsgFetchPriceData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFetchPriceData) GetOracleScriptID() uint64 {
	if m != nil {
		return m.OracleScriptID
	}
	return 0
}

func (m *MsgFetchPriceData) GetSourceChannel() string {
	if m != nil {
		return m.SourceChannel
	}
	return ""
}

func (m *MsgFetchPriceData) GetCalldata() *FetchPriceCallData {
	if m != nil {
		return m.Calldata
	}
	return nil
}

func (m *MsgFetchPriceData) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *MsgFetchPriceData) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *MsgFetchPriceData) GetFeeLimit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeLimit
	}
	return nil
}

func (m *MsgFetchPriceData) GetRequestKey() string {
	if m != nil {
		return m.RequestKey
	}
	return ""
}

func (m *MsgFetchPriceData) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *MsgFetchPriceData) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

func (m *MsgFetchPriceData) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *MsgFetchPriceData) GetTwaBatchSize() uint64 {
	if m != nil {
		return m.TwaBatchSize
	}
	return 0
}

func (m *MsgFetchPriceData) GetAcceptedHeightDiff() int64 {
	if m != nil {
		return m.AcceptedHeightDiff
	}
	return 0
}

type MsgFetchPriceDataResponse struct {
}

func (m *MsgFetchPriceDataResponse) Reset()         { *m = MsgFetchPriceDataResponse{} }
func (m *MsgFetchPriceDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFetchPriceDataResponse) ProtoMessage()    {}
func (*MsgFetchPriceDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_527350aa0883cada, []int{1}
}
func (m *MsgFetchPriceDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFetchPriceDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFetchPriceDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFetchPriceDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFetchPriceDataResponse.Merge(m, src)
}
func (m *MsgFetchPriceDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFetchPriceDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFetchPriceDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFetchPriceDataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgFetchPriceData)(nil), "aether.bandoracle.v1beta1.MsgFetchPriceData")
	proto.RegisterType((*MsgFetchPriceDataResponse)(nil), "aether.bandoracle.v1beta1.MsgFetchPriceDataResponse")
}

func init() {
	proto.RegisterFile("aether/bandoracle/v1beta1/tx.proto", fileDescriptor_527350aa0883cada)
}

var fileDescriptor_527350aa0883cada = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xe3, 0x5f, 0xff, 0x25, 0x9b, 0x36, 0xfa, 0x61, 0x55, 0xc2, 0x6d, 0x25, 0x3b, 0x8a,
	0x40, 0x0a, 0x42, 0xb5, 0x69, 0xb9, 0x71, 0x4c, 0x22, 0x20, 0xa2, 0x08, 0x70, 0x0f, 0x48, 0x5c,
	0xac, 0xc9, 0x7a, 0x12, 0xaf, 0x62, 0x7b, 0x8d, 0x77, 0x43, 0x9b, 0x3e, 0x05, 0xef, 0xc0, 0x8d,
	0x27, 0xe9, 0xb1, 0x47, 0x4e, 0x01, 0xa5, 0x6f, 0xd0, 0x27, 0x40, 0xbb, 0xeb, 0xfe, 0x11, 0xd0,
	0x53, 0xb2, 0xdf, 0xef, 0x67, 0x66, 0xbc, 0x3b, 0x33, 0xa4, 0x03, 0x28, 0x13, 0x2c, 0x83, 0x11,
	0xe4, 0x31, 0x2f, 0x81, 0xa6, 0x18, 0x7c, 0x39, 0x18, 0xa1, 0x84, 0x83, 0x40, 0x9e, 0xfa, 0x45,
	0xc9, 0x25, 0xb7, 0x77, 0x0c, 0xe3, 0xdf, 0x32, 0x7e, 0xc5, 0xec, 0x6e, 0x4f, 0xf8, 0x84, 0x6b,
	0x2a, 0x50, 0xff, 0x4c, 0xc0, 0xae, 0x4b, 0xb9, 0xc8, 0xb8, 0x08, 0x46, 0x20, 0x6e, 0xd3, 0x51,
	0xce, 0xf2, 0xca, 0x7f, 0x7a, 0x7f, 0xd1, 0x31, 0x4a, 0x9a, 0x44, 0x45, 0xc9, 0x28, 0x1a, 0xb8,
	0xf3, 0x6d, 0x8d, 0x3c, 0x78, 0x2b, 0x26, 0x2f, 0x95, 0xf1, 0x5e, 0xe9, 0x03, 0x90, 0x60, 0x3b,
	0x64, 0x83, 0x96, 0x08, 0x92, 0x97, 0x8e, 0xd5, 0xb6, 0xba, 0x8d, 0xf0, 0xfa, 0x68, 0x7f, 0x24,
	0xff, 0x9b, 0x9c, 0x91, 0xa0, 0x25, 0x2b, 0x64, 0xc4, 0x62, 0xe7, 0xbf, 0xb6, 0xd5, 0x5d, 0xed,
	0xed, 0x2f, 0x17, 0x5e, 0xeb, 0x9d, 0xf6, 0x8e, 0xb5, 0x35, 0x1c, 0x5c, 0x2d, 0xbc, 0x87, 0x73,
	0xc8, 0xd2, 0x17, 0x9d, 0x3f, 0x63, 0x3a, 0x61, 0x8b, 0xdf, 0x45, 0x63, 0xfb, 0x31, 0x69, 0x09,
	0x3e, 0x2b, 0x29, 0x46, 0x34, 0x81, 0x3c, 0xc7, 0xd4, 0x59, 0xd1, 0x95, 0xb7, 0x8c, 0xda, 0x37,
	0xa2, 0x3d, 0x24, 0x75, 0x0a, 0x69, 0x1a, 0x83, 0x04, 0x67, 0xb5, 0x6d, 0x75, 0x9b, 0x87, 0xfb,
	0xfe, 0xbd, 0x0f, 0xe8, 0xdf, 0x5e, 0xab, 0x0f, 0x69, 0xaa, 0xae, 0x16, 0xde, 0x84, 0xdb, 0x7b,
	0xa4, 0x01, 0x62, 0x1a, 0x51, 0x3e, 0xcb, 0xa5, 0xb3, 0xa6, 0xee, 0x10, 0xd6, 0x41, 0x4c, 0xfb,
	0xea, 0xac, 0xcc, 0x8c, 0xe5, 0x95, 0xb9, 0x6e, 0xcc, 0x8c, 0xe5, 0xc6, 0x4c, 0x48, 0x63, 0x8c,
	0x18, 0xa5, 0x2c, 0x63, 0xd2, 0xd9, 0x68, 0xaf, 0x74, 0x9b, 0x87, 0x3b, 0xbe, 0xe9, 0x8a, 0xaf,
	0xba, 0x72, 0x53, 0xbf, 0xcf, 0x59, 0xde, 0x7b, 0x76, 0xbe, 0xf0, 0x6a, 0xdf, 0x7f, 0x7a, 0xdd,
	0x09, 0x93, 0xc9, 0x6c, 0xe4, 0x53, 0x9e, 0x05, 0x55, 0x0b, 0xcd, 0xcf, 0xbe, 0x88, 0xa7, 0x81,
	0x9c, 0x17, 0x28, 0x74, 0x80, 0x08, 0xeb, 0x63, 0xc4, 0x23, 0x95, 0xdc, 0xf6, 0x48, 0xb3, 0xc4,
	0xcf, 0x33, 0x14, 0x32, 0x9a, 0xe2, 0xdc, 0xa9, 0xeb, 0x27, 0x21, 0x95, 0xf4, 0x06, 0xe7, 0x0a,
	0x28, 0x4a, 0x2c, 0xa0, 0xc4, 0x68, 0x02, 0xc2, 0x69, 0xe8, 0x2f, 0x25, 0x95, 0xf4, 0x0a, 0x84,
	0x02, 0xf0, 0x14, 0xe9, 0x4c, 0x1a, 0x80, 0x18, 0xa0, 0x92, 0x14, 0xf0, 0x84, 0x34, 0x68, 0xca,
	0x30, 0xd7, 0xad, 0x6c, 0xaa, 0x02, 0xbd, 0xcd, 0xe5, 0xc2, 0xab, 0xf7, 0xb5, 0x38, 0x1c, 0x84,
	0x75, 0x63, 0x0f, 0x63, 0xfb, 0x11, 0x69, 0xc9, 0x13, 0x88, 0x46, 0xa0, 0xa6, 0x48, 0xb0, 0x33,
	0x74, 0x36, 0x75, 0xba, 0x4d, 0x79, 0x02, 0x3d, 0x25, 0x1e, 0xb3, 0x33, 0xb4, 0x3f, 0x90, 0x6d,
	0xa0, 0x14, 0x0b, 0x89, 0x71, 0x94, 0x20, 0x9b, 0x24, 0x32, 0x8a, 0xd9, 0x78, 0xec, 0x6c, 0xb5,
	0xad, 0xee, 0x4a, 0xcf, 0xbb, 0x5a, 0x78, 0x7b, 0x66, 0x28, 0xfe, 0x45, 0x75, 0x42, 0xfb, 0x5a,
	0x7e, 0xad, 0xd5, 0x81, 0x12, 0xf7, 0xc8, 0xce, 0x5f, 0x43, 0x1a, 0xa2, 0x28, 0x78, 0x2e, 0xb0,
	0x77, 0x74, 0xbe, 0x74, 0xad, 0x8b, 0xa5, 0x6b, 0xfd, 0x5a, 0xba, 0xd6, 0xd7, 0x4b, 0xb7, 0x76,
	0x71, 0xe9, 0xd6, 0x7e, 0x5c, 0xba, 0xb5, 0x4f, 0x87, 0x77, 0x5e, 0x3c, 0xe3, 0x53, 0x26, 0x21,
	0x47, 0x79, 0xc2, 0xcb, 0x69, 0x50, 0xad, 0xc8, 0xe9, 0xdd, 0x25, 0xd1, 0x1d, 0x18, 0xad, 0xeb,
	0xbd, 0x78, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xf2, 0x17, 0x5b, 0xbb, 0x03, 0x00, 0x00,
}

func (m *MsgFetchPriceData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFetchPriceData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFetchPriceData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceptedHeightDiff != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AcceptedHeightDiff))
		i--
		dAtA[i] = 0x68
	}
	if m.TwaBatchSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TwaBatchSize))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ExecuteGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x50
	}
	if m.PrepareGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RequestKey) > 0 {
		i -= len(m.RequestKey)
		copy(dAtA[i:], m.RequestKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MinCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x30
	}
	if m.AskCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x28
	}
	if m.Calldata != nil {
		{
			size, err := m.Calldata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OracleScriptID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OracleScriptID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFetchPriceDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFetchPriceDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFetchPriceDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgFetchPriceData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OracleScriptID != 0 {
		n += 1 + sovTx(uint64(m.OracleScriptID))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Calldata != nil {
		l = m.Calldata.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AskCount != 0 {
		n += 1 + sovTx(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovTx(uint64(m.MinCount))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.RequestKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PrepareGas != 0 {
		n += 1 + sovTx(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovTx(uint64(m.ExecuteGas))
	}
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TwaBatchSize != 0 {
		n += 1 + sovTx(uint64(m.TwaBatchSize))
	}
	if m.AcceptedHeightDiff != 0 {
		n += 1 + sovTx(uint64(m.AcceptedHeightDiff))
	}
	return n
}

func (m *MsgFetchPriceDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgFetchPriceData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFetchPriceData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFetchPriceData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptID", wireType)
			}
			m.OracleScriptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calldata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Calldata == nil {
				m.Calldata = &FetchPriceCallData{}
			}
			if err := m.Calldata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwaBatchSize", wireType)
			}
			m.TwaBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwaBatchSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedHeightDiff", wireType)
			}
			m.AcceptedHeightDiff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AcceptedHeightDiff |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFetchPriceDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFetchPriceDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFetchPriceDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
